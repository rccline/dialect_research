{"title":"EBSCO Repository Tracking Dashboard","markdown":{"yaml":{"title":"EBSCO Repository Tracking Dashboard","format":{"html":{"theme":"cosmo","toc":true,"code-fold":true,"page-layout":"full"}},"editor":"visual","execute":{"echo":false,"warning":false}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\nThis dashboard provides an interface for searching, analyzing, and managing your EBSCO bibliographic data and repository holdings. The database helps you track which repositories (libraries, universities, research centers) have the references from your EBSCO export. EBSCO Reference Collection.\n\n```{r setup, include=FALSE}\n# Load required libraries\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(shiny)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(knitr)\nlibrary(here)\n\n# Source database functions\nsource(here(\"scripts/r-script-database-setup.R\"))\n\n# Connect to database with better error handling\ndb_config <- list(\n  dbname = \"ebsco_repositories\",\n  host = \"localhost\",\n  port = 5432,\n  user = \"postgres\",      # Update with your actual username\n  password = \"password\"   # Update with your actual password\n)\n\n# Try to establish connection with error handling\ntryCatch({\n  con <- dbConnect(\n    RPostgres::Postgres(),\n    dbname = db_config$dbname,\n    host = db_config$host,\n    port = db_config$port,\n    user = db_config$user,\n    password = db_config$password\n  )\n  message(\"Successfully connected to PostgreSQL database\")\n}, error = function(e) {\n  message(\"Error connecting to database: \", e$message)\n  # Create a mock connection to avoid errors during rendering\n  # This will allow the document to render with warnings instead of failing completely\n  con <<- NULL\n})\n\n# Check if connection is valid before proceeding\nif (is.null(con)) {\n  warning(\"Database connection failed. Dashboard will show error messages instead of data.\")\n}\n\n# Function to safely run database queries\nsafe_query <- function(query, params = NULL) {\n  if (is.null(con)) {\n    warning(\"Cannot execute query: No database connection\")\n    # Return empty data frame with expected columns\n    return(data.frame())\n  } else {\n    tryCatch({\n      if (is.null(params)) {\n        return(safe_query(con, query))\n      } else {\n        return(safe_query(con, query, params = params))\n      }\n    }, error = function(e) {\n      warning(\"Query error: \", e$message)\n      return(data.frame())\n    })\n  }\n}\n\n# Function to disconnect when session ends\nknitr::knit_hooks$set(document = function(x) {\n  if (exists(\"con\") && !is.null(con)) {\n    dbDisconnect(con)\n  }\n  x\n})\n\n```\n\n## EBSCO Reference Collection\n\n```{r}\n\n# Get overall stats\ntotal_refs <- safe_query('SELECT COUNT(*) FROM \"References\"')\ntotal_refs <- if(nrow(total_refs) > 0 && \"count\" %in% names(total_refs)) total_refs$count else 0\n\ntotal_books <- safe_query('SELECT COUNT(*) FROM \"References\" WHERE \"DocumentType\" = \\'Book\\'')\ntotal_books <- if(nrow(total_books) > 0 && \"count\" %in% names(total_books)) total_books$count else 0\n\ntotal_journals <- safe_query('SELECT COUNT(*) FROM \"References\" WHERE \"DocumentType\" = \\'Journal Article\\'')\ntotal_journals <- if(nrow(total_journals) > 0 && \"count\" %in% names(total_journals)) total_journals$count else 0\n\ntotal_other <- total_refs - total_books - total_journals\n\n# Get publication years\npub_years <- safe_query('SELECT SUBSTRING(CAST(\"PublicationDate\" AS TEXT), 1, 4) AS year, \n                        COUNT(*) AS count \n                        FROM \"References\" \n                        WHERE \"PublicationDate\" IS NOT NULL \n                        GROUP BY year \n                        ORDER BY year')\n\n# Subject stats\nsubject_counts <- safe_query('\n  SELECT s.\"SubjectName\", COUNT(*) as count \n  FROM \"Subjects\" s\n  JOIN \"ReferenceSubjects\" rs ON s.\"SubjectID\" = rs.\"SubjectID\"\n  GROUP BY s.\"SubjectName\"\n  ORDER BY count DESC\n  LIMIT 10\n')\n```\n\n::: panel-tabset\n## Overview\n\n```{r}\n# Create a summary table\noverview_data <- data.frame(\n  Category = c(\"Total References\", \"Books\", \"Journal Articles\", \"Other Types\"),\n  Count = c(total_refs, total_books, total_journals, total_other)\n)\n\n# Display summary table with kable\nkable(overview_data, col.names = c(\"Category\", \"Count\"),\n      caption = \"Summary of References in Database\")\n```\n\n## Publication Years\n\n```{r}\n# Make sure pub_years has the right structure for plotting\nif(nrow(pub_years) == 0 || !all(c(\"year\", \"count\") %in% names(pub_years))) {\n  # Create a default data frame if the query returned empty or wrong format\n  pub_years <- data.frame(\n    year = c(2020, 2021, 2022, 2023),\n    count = c(0, 0, 0, 0)\n  )\n  message(\"No publication year data available. Using placeholder data.\")\n} else {\n  # Convert year to numeric\n  pub_years$year <- as.numeric(pub_years$year)\n}\n\n# Plot publication years with error handling\ntryCatch({\n  ggplot(pub_years, aes(x = year, y = count)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    theme_minimal() +\n    labs(title = \"Publications by Year\",\n         x = \"Publication Year\",\n         y = \"Number of References\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}, error = function(e) {\n  # Return a blank plot with error message if plotting fails\n  ggplot() + \n    annotate(\"text\", x = 0.5, y = 0.5, label = paste(\"Plot error:\", e$message)) +\n    theme_void() +\n    labs(title = \"Error: Could not generate publication years plot\")\n})\n\n```\n\n## Top Subjects\n\n```{r}\n# Make sure subject_counts has the right structure for plotting\nif(nrow(subject_counts) == 0 || !all(c(\"SubjectName\", \"count\") %in% names(subject_counts))) {\n  # Create a default data frame if the query returned empty or wrong format\n  subject_counts <- data.frame(\n    SubjectName = c(\"No data available\"),\n    count = c(0)\n  )\n  message(\"No subject data available. Using placeholder data.\")\n}\n\n# Plot top subjects with error handling\ntryCatch({\n  ggplot(subject_counts, aes(x = reorder(SubjectName, count), y = count)) +\n    geom_bar(stat = \"identity\", fill = \"darkgreen\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = \"Top 10 Subjects\",\n         x = NULL,\n         y = \"Number of References\")\n}, error = function(e) {\n  # Return a blank plot with error message if plotting fails\n  ggplot() + \n    annotate(\"text\", x = 0.5, y = 0.5, label = paste(\"Plot error:\", e$message)) +\n    theme_void() +\n    labs(title = \"Error: Could not generate subjects plot\")\n})\n```\n:::\n\n## Search References\n\n```{r search-ui1, eval=FALSE}\n# Create search UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(3, \n             textInput(\"title\", \"Title:\", \"\"),\n             textInput(\"author\", \"Author/Contributors:\", \"\")),\n      column(3,\n             textInput(\"identifier\", \"ISBN/ISSN/DOI:\", \"\"),\n             textInput(\"subject\", \"Subject:\", \"\")),\n      column(6,\n             br(),\n             actionButton(\"search\", \"Search\", class = \"btn-primary\"),\n             actionButton(\"clear\", \"Clear\", class = \"btn-secondary\"),\n             downloadButton(\"downloadResults\", \"Download Results\"))\n    ),\n    hr(),\n    DTOutput(\"resultsTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"output.refSelected\",\n      fluidRow(\n        column(12, h4(\"Holdings Information\")),\n        column(12, \n               p(\"Select a reference in the table above to see its repository holdings.\"),\n               DTOutput(\"holdingsTable\"))\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      results = NULL,\n      selected_ref_id = NULL\n    )\n    \n    # Search function\n    observeEvent(input$search, {\n      search_params <- list(\n        title = input$title,\n        author = input$author,\n        identifier = input$identifier,\n        subject = input$subject\n      )\n      \n      # Get results\n      results <- search_references(con, search_params)\n      values$results <- results\n      \n      # Reset selected reference\n      values$selected_ref_id <- NULL\n    })\n    \n    # Clear search form\n    observeEvent(input$clear, {\n      updateTextInput(session, \"title\", value = \"\")\n      updateTextInput(session, \"author\", value = \"\")\n      updateTextInput(session, \"identifier\", value = \"\")\n      updateTextInput(session, \"subject\", value = \"\")\n      values$results <- NULL\n      values$selected_ref_id <- NULL\n    })\n    \n    # Render results table\n    output$resultsTable <- renderDT({\n      if (is.null(values$results) || nrow(values$results) == 0) {\n        return(NULL)\n      }\n      \n      # Format the data\n      display_data <- values$results %>%\n        mutate(\n          Year = substr(CoverDate, 1, 4),\n          Identifiers = paste0(\n            ifelse(!is.na(ISBN) & ISBN != \"\", paste0(\"ISBN: \", ISBN), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", ifelse(ISBN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", paste0(\"ISSN: \", ISSN), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", ifelse(ISBN != \"\" | ISSN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", paste0(\"DOI: \", DOI), \"\")\n          )\n        ) %>%\n        select(ReferenceID, Title, Contributors, DocumentType, Publisher, Year, Identifiers)\n      \n      datatable(\n        display_data,\n        selection = \"single\",\n        options = list(\n          pageLength = 10,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide ReferenceID column\n          )\n        ),\n        colnames = c(\"ID\", \"Title\", \"Authors\", \"Type\", \"Publisher\", \"Year\", \"Identifiers\")\n      )\n    })\n    \n    # Handle row selection\n    observeEvent(input$resultsTable_rows_selected, {\n      selected_row <- input$resultsTable_rows_selected\n      if (length(selected_row) > 0) {\n        values$selected_ref_id <- values$results$ReferenceID[selected_row]\n      } else {\n        values$selected_ref_id <- NULL\n      }\n    })\n    \n    # Holdings table\n    output$holdingsTable <- renderDT({\n      if (is.null(values$selected_ref_id)) {\n        return(NULL)\n      }\n      \n      # Get holdings for the selected reference\n      holdings <- get_reference_holdings(con, values$selected_ref_id)\n      \n      if (is.null(holdings) || nrow(holdings) == 0) {\n        return(datatable(\n          data.frame(Message = \"No holdings found for this reference\"),\n          options = list(dom = 't'),\n          rownames = FALSE\n        ))\n      }\n      \n      # Format date\n      holdings <- holdings %>%\n        mutate(VerificationDate = format(as.Date(VerificationDate), \"%Y-%m-%d\"))\n      \n      datatable(\n        holdings %>% select(-HoldingID),\n        options = list(\n          pageLength = 5,\n          dom = 'tip'\n        ),\n        colnames = c(\"Repository\", \"Format\", \"Call Number\", \"Location\", \n                     \"Access Restriction\", \"Verified\", \"Notes\")\n      )\n    })\n    \n    # Flag to show holdings section\n    output$refSelected <- reactive({\n      return(!is.null(values$selected_ref_id))\n    })\n    outputOptions(output, \"refSelected\", suspendWhenHidden = FALSE)\n    \n    # Download handler\n    output$downloadResults <- downloadHandler(\n      filename = function() {\n        paste0(\"ebsco-search-results-\", format(Sys.time(), \"%Y%m%d-%H%M%S\"), \".csv\")\n      },\n      content = function(file) {\n        if (is.null(values$results)) {\n          write.csv(data.frame(Message = \"No search results to download\"), file, row.names = FALSE)\n        } else {\n          write.csv(values$results, file, row.names = FALSE)\n        }\n      }\n    )\n  },\n  \n  options = list(height = 800)\n)\n\n```\n\n## Repository Management\n\n```{r search-ui2, eval=FALSE}\n# Create repository management UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(12, h4(\"Repository List\")),\n      column(12, \n             actionButton(\"addRepo\", \"Add New Repository\", class = \"btn-primary\"),\n             actionButton(\"refreshRepos\", \"Refresh List\", class = \"btn-info\"))\n    ),\n    br(),\n    DTOutput(\"repositoriesTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"input.addRepo > 0 || output.editMode\",\n      fluidRow(\n        column(12, h4(textOutput(\"formTitle\"))),\n        column(4,\n               textInput(\"repoName\", \"Repository Name:*\", \"\"),\n               textInput(\"repoType\", \"Repository Type:\", \"\"),\n               textInput(\"institution\", \"Institution:\", \"\")),\n        column(4,\n               textInput(\"city\", \"City:\", \"\"),\n               textInput(\"state\", \"State/Province:\", \"\"),\n               textInput(\"country\", \"Country:\", \"\")),\n        column(4,\n               textInput(\"website\", \"Website URL:\", \"\"),\n               textInput(\"email\", \"Contact Email:\", \"\"),\n               textInput(\"phone\", \"Contact Phone:\", \"\"))\n      ),\n      fluidRow(\n        column(8, \n               textAreaInput(\"notes\", \"Notes:\", \"\", height = \"100px\")),\n        column(4,\n               br(), br(),\n               actionButton(\"saveRepo\", \"Save Repository\", class = \"btn-success\"),\n               actionButton(\"cancelRepo\", \"Cancel\", class = \"btn-secondary\"))\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      repositories = NULL,\n      edit_mode = FALSE,\n      edit_id = NULL\n    )\n    \n    # Load repositories on initialization\n    observe({\n      if (is.null(values$repositories)) {\n        refreshRepositories()\n      }\n    })\n    \n    # Function to refresh repositories list\n    refreshRepositories <- function() {\n      values$repositories <- list_repositories(con)\n    }\n    \n    # Refresh button click\n    observeEvent(input$refreshRepos, {\n      refreshRepositories()\n    })\n    \n    # Display repositories table\n    output$repositoriesTable <- renderDT({\n      req(values$repositories)\n      \n      datatable(\n        values$repositories,\n        selection = \"single\",\n        options = list(\n          pageLength = 10,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide RepositoryID column\n          )\n        ),\n        colnames = c(\"ID\", \"Name\", \"Institution\", \"City\", \"State\", \"Country\")\n      )\n    })\n    \n    # Add repository button\n    observeEvent(input$addRepo, {\n      values$edit_mode <- FALSE\n      values$edit_id <- NULL\n      \n      # Clear form fields\n      updateTextInput(session, \"repoName\", value = \"\")\n      updateTextInput(session, \"repoType\", value = \"\")\n      updateTextInput(session, \"institution\", value = \"\")\n      updateTextInput(session, \"city\", value = \"\")\n      updateTextInput(session, \"state\", value = \"\")\n      updateTextInput(session, \"country\", value = \"\")\n      updateTextInput(session, \"website\", value = \"\")\n      updateTextInput(session, \"email\", value = \"\")\n      updateTextInput(session, \"phone\", value = \"\")\n      updateTextAreaInput(session, \"notes\", value = \"\")\n    })\n    \n    # Form title\n    output$formTitle <- renderText({\n      if (values$edit_mode) {\n        \"Edit Repository\"\n      } else {\n        \"Add New Repository\"\n      }\n    })\n    \n    # Edit mode flag\n    output$editMode <- reactive({\n      return(values$edit_mode)\n    })\n    outputOptions(output, \"editMode\", suspendWhenHidden = FALSE)\n    \n    # Row selection for edit\n    observeEvent(input$repositoriesTable_rows_selected, {\n      selected_row <- input$repositoriesTable_rows_selected\n      if (length(selected_row) > 0) {\n        # Get selected repository details\n        values$edit_mode <- TRUE\n        values$edit_id <- values$repositories$RepositoryID[selected_row]\n        \n        # Query for full repository details\n        repo_details <- safe_query(con, '\n          SELECT * FROM \"Repositories\"\n          WHERE \"RepositoryID\" = $1\n        ', params = list(values$edit_id))\n        \n        if (nrow(repo_details) > 0) {\n          # Populate form fields\n          updateTextInput(session, \"repoName\", value = repo_details$RepositoryName)\n          updateTextInput(session, \"repoType\", value = ifelse(is.na(repo_details$RepositoryType), \"\", repo_details$RepositoryType))\n          updateTextInput(session, \"institution\", value = ifelse(is.na(repo_details$Institution), \"\", repo_details$Institution))\n          updateTextInput(session, \"city\", value = ifelse(is.na(repo_details$City), \"\", repo_details$City))\n          updateTextInput(session, \"state\", value = ifelse(is.na(repo_details$State), \"\", repo_details$State))\n          updateTextInput(session, \"country\", value = ifelse(is.na(repo_details$Country), \"\", repo_details$Country))\n          updateTextInput(session, \"website\", value = ifelse(is.na(repo_details$WebsiteURL), \"\", repo_details$WebsiteURL))\n          updateTextInput(session, \"email\", value = ifelse(is.na(repo_details$ContactEmail), \"\", repo_details$ContactEmail))\n          updateTextInput(session, \"phone\", value = ifelse(is.na(repo_details$ContactPhone), \"\", repo_details$ContactPhone))\n          updateTextAreaInput(session, \"notes\", value = ifelse(is.na(repo_details$Notes), \"\", repo_details$Notes))\n        }\n      }\n    })\n    \n    # Save repository\n    observeEvent(input$saveRepo, {\n      # Validate required fields\n      if (input$repoName == \"\") {\n        showNotification(\"Repository Name is required\", type = \"error\")\n        return()\n      }\n      \n      # Prepare repository data\n      repo_data <- list(\n        name = input$repoName,\n        type = input$repoType,\n        institution = input$institution,\n        city = input$city,\n        state = input$state,\n        country = input$country,\n        website = input$website,\n        email = input$email,\n        phone = input$phone,\n        notes = input$notes\n      )\n      \n      if (values$edit_mode) {\n        # Update existing repository\n        tryCatch({\n          query <- '\n            UPDATE \"Repositories\"\n            SET \"RepositoryName\" = $1, \"RepositoryType\" = $2, \"Institution\" = $3,\n                \"City\" = $4, \"State\" = $5, \"Country\" = $6, \"WebsiteURL\" = $7,\n                \"ContactEmail\" = $8, \"ContactPhone\" = $9, \"Notes\" = $10\n            WHERE \"RepositoryID\" = $11\n          '\n          \n          dbExecute(con, query, params = c(\n            as.list(repo_data),\n            values$edit_id\n          ))\n          \n          showNotification(\"Repository updated successfully\", type = \"message\")\n          values$edit_mode <- FALSE\n          values$edit_id <- NULL\n          refreshRepositories()\n        }, error = function(e) {\n          showNotification(paste(\"Error updating repository:\", e$message), type = \"error\")\n        })\n      } else {\n        # Add new repository\n        result <- add_repository(con, repo_data)\n        if (!is.null(result)) {\n          showNotification(\"Repository added successfully\", type = \"message\")\n          refreshRepositories()\n        } else {\n          showNotification(\"Failed to add repository\", type = \"error\")\n        }\n      }\n    })\n    \n    # Cancel button\n    observeEvent(input$cancelRepo, {\n      values$edit_mode <- FALSE\n      values$edit_id <- NULL\n    })\n  },\n  \n  options = list(height = 800)\n)\n```\n\n## Holdings Management\n\n```{r search-ui3, eval=FALSE}\n # Create holdings management UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(12, h4(\"Manage Repository Holdings\")),\n      column(12, \n             p(\"First search for a reference, then add or edit its repository holdings.\"))\n    ),\n    hr(),\n    fluidRow(\n      column(3, \n             textInput(\"holdingsTitle\", \"Title:\", \"\"),\n             textInput(\"holdingsIdentifier\", \"ISBN/ISSN/DOI:\", \"\")),\n      column(3,\n             actionButton(\"holdingsSearch\", \"Search References\", class = \"btn-primary\"),\n             actionButton(\"holdingsClear\", \"Clear\", class = \"btn-secondary\"))\n    ),\n    hr(),\n    DTOutput(\"holdingsRefsTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"output.holdingsRefSelected\",\n      fluidRow(\n        column(12, h4(\"Current Holdings\")),\n        column(12, \n               actionButton(\"addHolding\", \"Add New Holding\", class = \"btn-success\")),\n        column(12, DTOutput(\"currentHoldingsTable\"))\n      ),\n      conditionalPanel(\n        condition = \"input.addHolding > 0 || output.holdingsEditMode\",\n        hr(),\n        fluidRow(\n          column(12, h4(textOutput(\"holdingsFormTitle\"))),\n          column(4,\n                 selectInput(\"holdingsRepo\", \"Repository:*\", choices = NULL),\n                 textInput(\"holdingsFormat\", \"Format:\", \"\"),\n                 textInput(\"holdingsCallNumber\", \"Call Number:\", \"\")),\n          column(4,\n                 textInput(\"holdingsLocation\", \"Location Note:\", \"\"),\n                 textInput(\"holdingsAccess\", \"Access Restriction:\", \"\"),\n                 dateInput(\"holdingsVerification\", \"Verification Date:\", value = Sys.Date())),\n          column(4,\n                 textAreaInput(\"holdingsNotes\", \"Notes:\", \"\", height = \"100px\"),\n                 br(),\n                 actionButton(\"saveHolding\", \"Save Holding\", class = \"btn-success\"),\n                 actionButton(\"cancelHolding\", \"Cancel\", class = \"btn-secondary\"))\n        )\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      ref_results = NULL,\n      selected_ref_id = NULL,\n      current_holdings = NULL,\n      holdings_edit_mode = FALSE,\n      holdings_edit_id = NULL\n    )\n    \n    # Get repositories for dropdown\n    repositories <- reactive({\n      repo_list <- safe_query(con, 'SELECT \"RepositoryID\", \"RepositoryName\" FROM \"Repositories\" ORDER BY \"RepositoryName\"')\n      repos <- setNames(repo_list$RepositoryID, repo_list$RepositoryName)\n      return(repos)\n    })\n    \n    # Update repository dropdown\n    observe({\n      updateSelectInput(session, \"holdingsRepo\", choices = repositories())\n    })\n    \n    # Search for references\n    observeEvent(input$holdingsSearch, {\n      # Get search parameters\n      search_params <- list(\n        title = input$holdingsTitle,\n        identifier = input$holdingsIdentifier,\n        author = \"\",\n        subject = \"\"\n      )\n      \n      # Perform search\n      values$ref_results <- search_references(con, search_params)\n      \n      # Reset selection\n      values$selected_ref_id <- NULL\n      values$current_holdings <- NULL\n    })\n    \n    # Clear search form\n    observeEvent(input$holdingsClear, {\n      updateTextInput(session, \"holdingsTitle\", value = \"\")\n      updateTextInput(session, \"holdingsIdentifier\", value = \"\")\n      values$ref_results <- NULL\n      values$selected_ref_id <- NULL\n      values$current_holdings <- NULL\n    })\n    \n    # Render reference results\n    output$holdingsRefsTable <- renderDT({\n      if (is.null(values$ref_results) || nrow(values$ref_results) == 0) {\n        return(NULL)\n      }\n      \n      # Format the data\n      display_data <- values$ref_results %>%\n        mutate(\n          Year = substr(CoverDate, 1, 4),\n          Identifiers = paste0(\n            ifelse(!is.na(ISBN) & ISBN != \"\", paste0(\"ISBN: \", ISBN), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", ifelse(ISBN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", paste0(\"ISSN: \", ISSN), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", ifelse(ISBN != \"\" | ISSN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", paste0(\"DOI: \", DOI), \"\")\n          )\n        ) %>%\n        select(ReferenceID, Title, DocumentType, Year, Identifiers)\n      \n      datatable(\n        display_data,\n        selection = \"single\",\n        options = list(\n          pageLength = 5,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide ReferenceID column\n          )\n        ),\n        colnames = c(\"ID\", \"Title\", \"Type\", \"Year\", \"Identifiers\")\n      )\n    })\n    \n    # Handle reference selection\n    observeEvent(input$holdingsRefsTable_rows_selected, {\n      selected_row <- input$holdingsRefsTable_rows_selected\n      if (length(selected_row) > 0) {\n        values$selected_ref_id <- values$ref_results$ReferenceID[selected_row]\n        refreshHoldings()\n      } else {\n        values$selected_ref_id <- NULL\n        values$current_holdings <- NULL\n      }\n    })\n    \n    # Refresh holdings\n    refreshHoldings <- function() {\n      if (!is.null(values$selected_ref_id)) {\n        values$current_holdings <- get_reference_holdings(con, values$selected_ref_id)\n      }\n    }\n    \n    # Reference selected flag\n    output$holdingsRefSelected <- reactive({\n      return(!is.null(values$selected_ref_id))\n    })\n    outputOptions(output, \"holdingsRefSelected\", suspendWhenHidden = FALSE)\n    \n    # Holdings edit mode flag\n    output$holdingsEditMode <- reactive({\n      return(values$holdings_edit_mode)\n    })\n    outputOptions(output, \"holdingsEditMode\", suspendWhenHidden = FALSE)\n    \n    # Current holdings table\n    output$currentHoldingsTable <- renderDT({\n      if (is.null(values$current_holdings) || nrow(values$current_holdings) == 0) {\n        return(datatable(\n          data.frame(Message = \"No holdings found for this reference\"),\n          options = list(dom = 't'),\n          rownames = FALSE\n        ))\n      }\n      \n      datatable(\n        values$current_holdings,\n        selection = \"single\",\n        options = list(\n          pageLength = 5,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide HoldingID column\n          )\n        ),\n        colnames = c(\"ID\", \"Repository\", \"Format\", \"Call Number\", \"Location\", \n                     \"Access Restriction\", \"Verified\", \"Notes\")\n      )\n    })\n    \n    # Add holding button\n    observeEvent(input$addHolding, {\n      values$holdings_edit_mode <- FALSE\n      values$holdings_edit_id <- NULL\n      \n      # Clear form fields\n      updateSelectInput(session, \"holdingsRepo\", selected = NULL)\n      updateTextInput(session, \"holdingsFormat\", value = \"\")\n      updateTextInput(session, \"holdingsCallNumber\", value = \"\")\n      updateTextInput(session, \"holdingsLocation\", value = \"\")\n      updateTextInput(session, \"holdingsAccess\", value = \"\")\n      updateDateInput(session, \"holdingsVerification\", value = Sys.Date())\n      updateTextAreaInput(session, \"holdingsNotes\", value = \"\")\n    })\n    \n    # Holdings form title\n    output$holdingsFormTitle <- renderText({\n      if (values$holdings_edit_mode) {\n        \"Edit Holding\"\n      } else {\n        \"Add New Holding\"\n      }\n    })\n    \n    # Save holding\n    observeEvent(input$saveHolding, {\n      # Validate required fields\n      if (is.null(input$holdingsRepo) || input$holdingsRepo == \"\") {\n        showNotification(\"Repository selection is required\", type = \"error\")\n        return()\n      }\n      \n      # Prepare holding data\n      holding_data <- list(\n        reference_id = values$selected_ref_id,\n        repository_id = as.integer(input$holdingsRepo),\n        format = input$holdingsFormat,\n        call_number = input$holdingsCallNumber,\n        location_note = input$holdingsLocation,\n        access_restriction = input$holdingsAccess,\n        verification_date = input$holdingsVerification,\n        notes = input$holdingsNotes\n      )\n      \n      if (values$holdings_edit_mode) {\n        # Update existing holding\n        tryCatch({\n          query <- '\n            UPDATE \"Holdings\"\n            SET \"RepositoryID\" = $1, \"Format\" = $2, \"CallNumber\" = $3,\n                \"LocationNote\" = $4, \"AccessRestriction\" = $5, \n                \"VerificationDate\" = $6, \"Notes\" = $7\n            WHERE \"HoldingID\" = $8\n          '\n          \n          dbExecute(con, query, params = c(\n            list(\n              holding_data$repository_id,\n              holding_data$format,\n              holding_data$call_number,\n              holding_data$location_note,\n              holding_data$access_restriction,\n              holding_data$verification_date,\n              holding_data$notes,\n              values$holdings_edit_id\n            )\n          ))\n          \n          showNotification(\"Holding updated successfully\", type = \"message\")\n          values$holdings_edit_mode <- FALSE\n          values$holdings_edit_id <- NULL\n          refreshHoldings()\n        }, error = function(e) {\n          showNotification(paste(\"Error updating holding:\", e$message), type = \"error\")\n        })\n      } else {\n        # Add new holding\n        result <- add_holding(con, holding_data)\n        if (!is.null(result)) {\n          showNotification(\"Holding added successfully\", type = \"message\")\n          refreshHoldings()\n        } else {\n          showNotification(\"Failed to add holding\", type = \"error\")\n        }\n      }\n    })\n    \n    # Cancel holding\n    observeEvent(input$cancelHolding, {\n      values$holdings_edit_mode <- FALSE\n      values$holdings_edit_id <- NULL\n    })\n    \n    # Handle holding selection for edit\n    observeEvent(input$currentHoldingsTable_rows_selected, {\n      selected_row <- input$currentHoldingsTable_rows_selected\n      if (length(selected_row) > 0 && !is.null(values$current_holdings)) {\n        # Get selected holding details\n        values$holdings_edit_mode <- TRUE\n        values$holdings_edit_id <- values$current_holdings$HoldingID[selected_row]\n        \n        # Query for full holding details\n        holding_details <- safe_query(con, '\n          SELECT * FROM \"Holdings\"\n          WHERE \"HoldingID\" = $1\n        ', params = list(values$holdings_edit_id))\n        \n        if (nrow(holding_details) > 0) {\n          # Populate form fields\n          updateSelectInput(session, \"holdingsRepo\", selected = as.character(holding_details$RepositoryID))\n          updateTextInput(session, \"holdingsFormat\", value = ifelse(is.na(holding_details$Format), \"\", holding_details$Format))\n          updateTextInput(session, \"holdingsCallNumber\", value = ifelse(is.na(holding_details$CallNumber), \"\", holding_details$CallNumber))\n          updateTextInput(session, \"holdingsLocation\", value = ifelse(is.na(holding_details$LocationNote), \"\", holding_details$LocationNote))\n          updateTextInput(session, \"holdingsAccess\", value = ifelse(is.na(holding_details$AccessRestriction), \"\", holding_details$AccessRestriction))\n          \n          if (!is.na(holding_details$VerificationDate)) {\n            updateDateInput(session, \"holdingsVerification\", value = as.Date(holding_details$VerificationDate))\n          }\n          \n          updateTextAreaInput(session, \"holdingsNotes\", value = ifelse(is.na(holding_details$Notes), \"\", holding_details$Notes))\n        }\n      }\n    })\n  },\n  \n  options = list(height = 800)\n)\n\n```\n\n## Data Import/Export\n\nThis section provides tools for importing your EBSCO data and managing your repository database.\n\n## Import EBSCO Data\n\n```{r}\n\nactionButton(\"importBtn\", \"Show Import Instructions\", class = \"btn-info\")\n```\n\n::: {#importInstructions style=\"display: none; background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 10px;\"}\n### Step-by-Step Import Instructions\n\n**Export data from EBSCO**:\n\nIn EBSCO, perform your search and select the references you want to track Click on the \"Export\" button and choose CSV format Save the file to your computer\n\n### Run the import script:\n\n**Open RStudio** Run the following R code, replacing the file path with your CSV file location:\n\n```{r}\n# Load the database functions\nsource(here(\"scripts/r-script-database-setup.R\"))\n\n# Connect to database\ncon <- connect_to_db()\n\n# Import EBSCO data\nimport_ebsco_csv(con, \"path/to/your/ebsco-export.csv\")\n\n# Disconnect when done\ndbDisconnect(con)\n```\n\n**Verify import**:\n\nUse the Search tab to confirm your data was imported Add repositories and holdings as needed\n:::\n\n```{js}\n$(document).ready(function() {\n  $(\"#importBtn\").click(function() {\n    $(\"#importInstructions\").toggle();\n    \n    if ($(\"#importBtn\").text() === \"Show Import Instructions\") {\n      $(\"#importBtn\").text(\"Hide Import Instructions\");\n    } else {\n      $(\"#importBtn\").text(\"Show Import Instructions\");\n    }\n  });\n});\n```\n\n## Database Backup/Restore\n\nRegular backups of your repository database are recommended. You can use PostgreSQL's built-in tools: Save this entire code (including the previous part I sent) into a file named `ebsco-dashboard.qmd` in your project folder. Then, you can render it in RStudio by:\n\n1.  Opening the file in RStudio\n2.  Clicking the \"Render\" button in the editor toolbar\n3.  Alternatively, running this command in the console: `quarto::quarto_preview(\"ebsco-dashboard.qmd\")`\n\nMake sure to: 1. Update the password in the `db_config` object to match your PostgreSQL password 2. Check that the path to your database functions script is correct (it's referencing `here(\"scripts/r-script-database-setup.R\")`)\n\nThe dashboard should now connect to your database, display statistics about your references, and provide interfaces for searching references, managing repositories, and tracking holdings.\n","srcMarkdownNoYaml":"\n\n## Overview\n\nThis dashboard provides an interface for searching, analyzing, and managing your EBSCO bibliographic data and repository holdings. The database helps you track which repositories (libraries, universities, research centers) have the references from your EBSCO export. EBSCO Reference Collection.\n\n```{r setup, include=FALSE}\n# Load required libraries\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(shiny)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(knitr)\nlibrary(here)\n\n# Source database functions\nsource(here(\"scripts/r-script-database-setup.R\"))\n\n# Connect to database with better error handling\ndb_config <- list(\n  dbname = \"ebsco_repositories\",\n  host = \"localhost\",\n  port = 5432,\n  user = \"postgres\",      # Update with your actual username\n  password = \"password\"   # Update with your actual password\n)\n\n# Try to establish connection with error handling\ntryCatch({\n  con <- dbConnect(\n    RPostgres::Postgres(),\n    dbname = db_config$dbname,\n    host = db_config$host,\n    port = db_config$port,\n    user = db_config$user,\n    password = db_config$password\n  )\n  message(\"Successfully connected to PostgreSQL database\")\n}, error = function(e) {\n  message(\"Error connecting to database: \", e$message)\n  # Create a mock connection to avoid errors during rendering\n  # This will allow the document to render with warnings instead of failing completely\n  con <<- NULL\n})\n\n# Check if connection is valid before proceeding\nif (is.null(con)) {\n  warning(\"Database connection failed. Dashboard will show error messages instead of data.\")\n}\n\n# Function to safely run database queries\nsafe_query <- function(query, params = NULL) {\n  if (is.null(con)) {\n    warning(\"Cannot execute query: No database connection\")\n    # Return empty data frame with expected columns\n    return(data.frame())\n  } else {\n    tryCatch({\n      if (is.null(params)) {\n        return(safe_query(con, query))\n      } else {\n        return(safe_query(con, query, params = params))\n      }\n    }, error = function(e) {\n      warning(\"Query error: \", e$message)\n      return(data.frame())\n    })\n  }\n}\n\n# Function to disconnect when session ends\nknitr::knit_hooks$set(document = function(x) {\n  if (exists(\"con\") && !is.null(con)) {\n    dbDisconnect(con)\n  }\n  x\n})\n\n```\n\n## EBSCO Reference Collection\n\n```{r}\n\n# Get overall stats\ntotal_refs <- safe_query('SELECT COUNT(*) FROM \"References\"')\ntotal_refs <- if(nrow(total_refs) > 0 && \"count\" %in% names(total_refs)) total_refs$count else 0\n\ntotal_books <- safe_query('SELECT COUNT(*) FROM \"References\" WHERE \"DocumentType\" = \\'Book\\'')\ntotal_books <- if(nrow(total_books) > 0 && \"count\" %in% names(total_books)) total_books$count else 0\n\ntotal_journals <- safe_query('SELECT COUNT(*) FROM \"References\" WHERE \"DocumentType\" = \\'Journal Article\\'')\ntotal_journals <- if(nrow(total_journals) > 0 && \"count\" %in% names(total_journals)) total_journals$count else 0\n\ntotal_other <- total_refs - total_books - total_journals\n\n# Get publication years\npub_years <- safe_query('SELECT SUBSTRING(CAST(\"PublicationDate\" AS TEXT), 1, 4) AS year, \n                        COUNT(*) AS count \n                        FROM \"References\" \n                        WHERE \"PublicationDate\" IS NOT NULL \n                        GROUP BY year \n                        ORDER BY year')\n\n# Subject stats\nsubject_counts <- safe_query('\n  SELECT s.\"SubjectName\", COUNT(*) as count \n  FROM \"Subjects\" s\n  JOIN \"ReferenceSubjects\" rs ON s.\"SubjectID\" = rs.\"SubjectID\"\n  GROUP BY s.\"SubjectName\"\n  ORDER BY count DESC\n  LIMIT 10\n')\n```\n\n::: panel-tabset\n## Overview\n\n```{r}\n# Create a summary table\noverview_data <- data.frame(\n  Category = c(\"Total References\", \"Books\", \"Journal Articles\", \"Other Types\"),\n  Count = c(total_refs, total_books, total_journals, total_other)\n)\n\n# Display summary table with kable\nkable(overview_data, col.names = c(\"Category\", \"Count\"),\n      caption = \"Summary of References in Database\")\n```\n\n## Publication Years\n\n```{r}\n# Make sure pub_years has the right structure for plotting\nif(nrow(pub_years) == 0 || !all(c(\"year\", \"count\") %in% names(pub_years))) {\n  # Create a default data frame if the query returned empty or wrong format\n  pub_years <- data.frame(\n    year = c(2020, 2021, 2022, 2023),\n    count = c(0, 0, 0, 0)\n  )\n  message(\"No publication year data available. Using placeholder data.\")\n} else {\n  # Convert year to numeric\n  pub_years$year <- as.numeric(pub_years$year)\n}\n\n# Plot publication years with error handling\ntryCatch({\n  ggplot(pub_years, aes(x = year, y = count)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    theme_minimal() +\n    labs(title = \"Publications by Year\",\n         x = \"Publication Year\",\n         y = \"Number of References\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}, error = function(e) {\n  # Return a blank plot with error message if plotting fails\n  ggplot() + \n    annotate(\"text\", x = 0.5, y = 0.5, label = paste(\"Plot error:\", e$message)) +\n    theme_void() +\n    labs(title = \"Error: Could not generate publication years plot\")\n})\n\n```\n\n## Top Subjects\n\n```{r}\n# Make sure subject_counts has the right structure for plotting\nif(nrow(subject_counts) == 0 || !all(c(\"SubjectName\", \"count\") %in% names(subject_counts))) {\n  # Create a default data frame if the query returned empty or wrong format\n  subject_counts <- data.frame(\n    SubjectName = c(\"No data available\"),\n    count = c(0)\n  )\n  message(\"No subject data available. Using placeholder data.\")\n}\n\n# Plot top subjects with error handling\ntryCatch({\n  ggplot(subject_counts, aes(x = reorder(SubjectName, count), y = count)) +\n    geom_bar(stat = \"identity\", fill = \"darkgreen\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = \"Top 10 Subjects\",\n         x = NULL,\n         y = \"Number of References\")\n}, error = function(e) {\n  # Return a blank plot with error message if plotting fails\n  ggplot() + \n    annotate(\"text\", x = 0.5, y = 0.5, label = paste(\"Plot error:\", e$message)) +\n    theme_void() +\n    labs(title = \"Error: Could not generate subjects plot\")\n})\n```\n:::\n\n## Search References\n\n```{r search-ui1, eval=FALSE}\n# Create search UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(3, \n             textInput(\"title\", \"Title:\", \"\"),\n             textInput(\"author\", \"Author/Contributors:\", \"\")),\n      column(3,\n             textInput(\"identifier\", \"ISBN/ISSN/DOI:\", \"\"),\n             textInput(\"subject\", \"Subject:\", \"\")),\n      column(6,\n             br(),\n             actionButton(\"search\", \"Search\", class = \"btn-primary\"),\n             actionButton(\"clear\", \"Clear\", class = \"btn-secondary\"),\n             downloadButton(\"downloadResults\", \"Download Results\"))\n    ),\n    hr(),\n    DTOutput(\"resultsTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"output.refSelected\",\n      fluidRow(\n        column(12, h4(\"Holdings Information\")),\n        column(12, \n               p(\"Select a reference in the table above to see its repository holdings.\"),\n               DTOutput(\"holdingsTable\"))\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      results = NULL,\n      selected_ref_id = NULL\n    )\n    \n    # Search function\n    observeEvent(input$search, {\n      search_params <- list(\n        title = input$title,\n        author = input$author,\n        identifier = input$identifier,\n        subject = input$subject\n      )\n      \n      # Get results\n      results <- search_references(con, search_params)\n      values$results <- results\n      \n      # Reset selected reference\n      values$selected_ref_id <- NULL\n    })\n    \n    # Clear search form\n    observeEvent(input$clear, {\n      updateTextInput(session, \"title\", value = \"\")\n      updateTextInput(session, \"author\", value = \"\")\n      updateTextInput(session, \"identifier\", value = \"\")\n      updateTextInput(session, \"subject\", value = \"\")\n      values$results <- NULL\n      values$selected_ref_id <- NULL\n    })\n    \n    # Render results table\n    output$resultsTable <- renderDT({\n      if (is.null(values$results) || nrow(values$results) == 0) {\n        return(NULL)\n      }\n      \n      # Format the data\n      display_data <- values$results %>%\n        mutate(\n          Year = substr(CoverDate, 1, 4),\n          Identifiers = paste0(\n            ifelse(!is.na(ISBN) & ISBN != \"\", paste0(\"ISBN: \", ISBN), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", ifelse(ISBN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", paste0(\"ISSN: \", ISSN), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", ifelse(ISBN != \"\" | ISSN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", paste0(\"DOI: \", DOI), \"\")\n          )\n        ) %>%\n        select(ReferenceID, Title, Contributors, DocumentType, Publisher, Year, Identifiers)\n      \n      datatable(\n        display_data,\n        selection = \"single\",\n        options = list(\n          pageLength = 10,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide ReferenceID column\n          )\n        ),\n        colnames = c(\"ID\", \"Title\", \"Authors\", \"Type\", \"Publisher\", \"Year\", \"Identifiers\")\n      )\n    })\n    \n    # Handle row selection\n    observeEvent(input$resultsTable_rows_selected, {\n      selected_row <- input$resultsTable_rows_selected\n      if (length(selected_row) > 0) {\n        values$selected_ref_id <- values$results$ReferenceID[selected_row]\n      } else {\n        values$selected_ref_id <- NULL\n      }\n    })\n    \n    # Holdings table\n    output$holdingsTable <- renderDT({\n      if (is.null(values$selected_ref_id)) {\n        return(NULL)\n      }\n      \n      # Get holdings for the selected reference\n      holdings <- get_reference_holdings(con, values$selected_ref_id)\n      \n      if (is.null(holdings) || nrow(holdings) == 0) {\n        return(datatable(\n          data.frame(Message = \"No holdings found for this reference\"),\n          options = list(dom = 't'),\n          rownames = FALSE\n        ))\n      }\n      \n      # Format date\n      holdings <- holdings %>%\n        mutate(VerificationDate = format(as.Date(VerificationDate), \"%Y-%m-%d\"))\n      \n      datatable(\n        holdings %>% select(-HoldingID),\n        options = list(\n          pageLength = 5,\n          dom = 'tip'\n        ),\n        colnames = c(\"Repository\", \"Format\", \"Call Number\", \"Location\", \n                     \"Access Restriction\", \"Verified\", \"Notes\")\n      )\n    })\n    \n    # Flag to show holdings section\n    output$refSelected <- reactive({\n      return(!is.null(values$selected_ref_id))\n    })\n    outputOptions(output, \"refSelected\", suspendWhenHidden = FALSE)\n    \n    # Download handler\n    output$downloadResults <- downloadHandler(\n      filename = function() {\n        paste0(\"ebsco-search-results-\", format(Sys.time(), \"%Y%m%d-%H%M%S\"), \".csv\")\n      },\n      content = function(file) {\n        if (is.null(values$results)) {\n          write.csv(data.frame(Message = \"No search results to download\"), file, row.names = FALSE)\n        } else {\n          write.csv(values$results, file, row.names = FALSE)\n        }\n      }\n    )\n  },\n  \n  options = list(height = 800)\n)\n\n```\n\n## Repository Management\n\n```{r search-ui2, eval=FALSE}\n# Create repository management UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(12, h4(\"Repository List\")),\n      column(12, \n             actionButton(\"addRepo\", \"Add New Repository\", class = \"btn-primary\"),\n             actionButton(\"refreshRepos\", \"Refresh List\", class = \"btn-info\"))\n    ),\n    br(),\n    DTOutput(\"repositoriesTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"input.addRepo > 0 || output.editMode\",\n      fluidRow(\n        column(12, h4(textOutput(\"formTitle\"))),\n        column(4,\n               textInput(\"repoName\", \"Repository Name:*\", \"\"),\n               textInput(\"repoType\", \"Repository Type:\", \"\"),\n               textInput(\"institution\", \"Institution:\", \"\")),\n        column(4,\n               textInput(\"city\", \"City:\", \"\"),\n               textInput(\"state\", \"State/Province:\", \"\"),\n               textInput(\"country\", \"Country:\", \"\")),\n        column(4,\n               textInput(\"website\", \"Website URL:\", \"\"),\n               textInput(\"email\", \"Contact Email:\", \"\"),\n               textInput(\"phone\", \"Contact Phone:\", \"\"))\n      ),\n      fluidRow(\n        column(8, \n               textAreaInput(\"notes\", \"Notes:\", \"\", height = \"100px\")),\n        column(4,\n               br(), br(),\n               actionButton(\"saveRepo\", \"Save Repository\", class = \"btn-success\"),\n               actionButton(\"cancelRepo\", \"Cancel\", class = \"btn-secondary\"))\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      repositories = NULL,\n      edit_mode = FALSE,\n      edit_id = NULL\n    )\n    \n    # Load repositories on initialization\n    observe({\n      if (is.null(values$repositories)) {\n        refreshRepositories()\n      }\n    })\n    \n    # Function to refresh repositories list\n    refreshRepositories <- function() {\n      values$repositories <- list_repositories(con)\n    }\n    \n    # Refresh button click\n    observeEvent(input$refreshRepos, {\n      refreshRepositories()\n    })\n    \n    # Display repositories table\n    output$repositoriesTable <- renderDT({\n      req(values$repositories)\n      \n      datatable(\n        values$repositories,\n        selection = \"single\",\n        options = list(\n          pageLength = 10,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide RepositoryID column\n          )\n        ),\n        colnames = c(\"ID\", \"Name\", \"Institution\", \"City\", \"State\", \"Country\")\n      )\n    })\n    \n    # Add repository button\n    observeEvent(input$addRepo, {\n      values$edit_mode <- FALSE\n      values$edit_id <- NULL\n      \n      # Clear form fields\n      updateTextInput(session, \"repoName\", value = \"\")\n      updateTextInput(session, \"repoType\", value = \"\")\n      updateTextInput(session, \"institution\", value = \"\")\n      updateTextInput(session, \"city\", value = \"\")\n      updateTextInput(session, \"state\", value = \"\")\n      updateTextInput(session, \"country\", value = \"\")\n      updateTextInput(session, \"website\", value = \"\")\n      updateTextInput(session, \"email\", value = \"\")\n      updateTextInput(session, \"phone\", value = \"\")\n      updateTextAreaInput(session, \"notes\", value = \"\")\n    })\n    \n    # Form title\n    output$formTitle <- renderText({\n      if (values$edit_mode) {\n        \"Edit Repository\"\n      } else {\n        \"Add New Repository\"\n      }\n    })\n    \n    # Edit mode flag\n    output$editMode <- reactive({\n      return(values$edit_mode)\n    })\n    outputOptions(output, \"editMode\", suspendWhenHidden = FALSE)\n    \n    # Row selection for edit\n    observeEvent(input$repositoriesTable_rows_selected, {\n      selected_row <- input$repositoriesTable_rows_selected\n      if (length(selected_row) > 0) {\n        # Get selected repository details\n        values$edit_mode <- TRUE\n        values$edit_id <- values$repositories$RepositoryID[selected_row]\n        \n        # Query for full repository details\n        repo_details <- safe_query(con, '\n          SELECT * FROM \"Repositories\"\n          WHERE \"RepositoryID\" = $1\n        ', params = list(values$edit_id))\n        \n        if (nrow(repo_details) > 0) {\n          # Populate form fields\n          updateTextInput(session, \"repoName\", value = repo_details$RepositoryName)\n          updateTextInput(session, \"repoType\", value = ifelse(is.na(repo_details$RepositoryType), \"\", repo_details$RepositoryType))\n          updateTextInput(session, \"institution\", value = ifelse(is.na(repo_details$Institution), \"\", repo_details$Institution))\n          updateTextInput(session, \"city\", value = ifelse(is.na(repo_details$City), \"\", repo_details$City))\n          updateTextInput(session, \"state\", value = ifelse(is.na(repo_details$State), \"\", repo_details$State))\n          updateTextInput(session, \"country\", value = ifelse(is.na(repo_details$Country), \"\", repo_details$Country))\n          updateTextInput(session, \"website\", value = ifelse(is.na(repo_details$WebsiteURL), \"\", repo_details$WebsiteURL))\n          updateTextInput(session, \"email\", value = ifelse(is.na(repo_details$ContactEmail), \"\", repo_details$ContactEmail))\n          updateTextInput(session, \"phone\", value = ifelse(is.na(repo_details$ContactPhone), \"\", repo_details$ContactPhone))\n          updateTextAreaInput(session, \"notes\", value = ifelse(is.na(repo_details$Notes), \"\", repo_details$Notes))\n        }\n      }\n    })\n    \n    # Save repository\n    observeEvent(input$saveRepo, {\n      # Validate required fields\n      if (input$repoName == \"\") {\n        showNotification(\"Repository Name is required\", type = \"error\")\n        return()\n      }\n      \n      # Prepare repository data\n      repo_data <- list(\n        name = input$repoName,\n        type = input$repoType,\n        institution = input$institution,\n        city = input$city,\n        state = input$state,\n        country = input$country,\n        website = input$website,\n        email = input$email,\n        phone = input$phone,\n        notes = input$notes\n      )\n      \n      if (values$edit_mode) {\n        # Update existing repository\n        tryCatch({\n          query <- '\n            UPDATE \"Repositories\"\n            SET \"RepositoryName\" = $1, \"RepositoryType\" = $2, \"Institution\" = $3,\n                \"City\" = $4, \"State\" = $5, \"Country\" = $6, \"WebsiteURL\" = $7,\n                \"ContactEmail\" = $8, \"ContactPhone\" = $9, \"Notes\" = $10\n            WHERE \"RepositoryID\" = $11\n          '\n          \n          dbExecute(con, query, params = c(\n            as.list(repo_data),\n            values$edit_id\n          ))\n          \n          showNotification(\"Repository updated successfully\", type = \"message\")\n          values$edit_mode <- FALSE\n          values$edit_id <- NULL\n          refreshRepositories()\n        }, error = function(e) {\n          showNotification(paste(\"Error updating repository:\", e$message), type = \"error\")\n        })\n      } else {\n        # Add new repository\n        result <- add_repository(con, repo_data)\n        if (!is.null(result)) {\n          showNotification(\"Repository added successfully\", type = \"message\")\n          refreshRepositories()\n        } else {\n          showNotification(\"Failed to add repository\", type = \"error\")\n        }\n      }\n    })\n    \n    # Cancel button\n    observeEvent(input$cancelRepo, {\n      values$edit_mode <- FALSE\n      values$edit_id <- NULL\n    })\n  },\n  \n  options = list(height = 800)\n)\n```\n\n## Holdings Management\n\n```{r search-ui3, eval=FALSE}\n # Create holdings management UI\nshinyApp(\n  ui = fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        .dataTables_wrapper { margin-bottom: 20px; }\n        .form-group { margin-bottom: 10px; }\n      \"))\n    ),\n    fluidRow(\n      column(12, h4(\"Manage Repository Holdings\")),\n      column(12, \n             p(\"First search for a reference, then add or edit its repository holdings.\"))\n    ),\n    hr(),\n    fluidRow(\n      column(3, \n             textInput(\"holdingsTitle\", \"Title:\", \"\"),\n             textInput(\"holdingsIdentifier\", \"ISBN/ISSN/DOI:\", \"\")),\n      column(3,\n             actionButton(\"holdingsSearch\", \"Search References\", class = \"btn-primary\"),\n             actionButton(\"holdingsClear\", \"Clear\", class = \"btn-secondary\"))\n    ),\n    hr(),\n    DTOutput(\"holdingsRefsTable\"),\n    hr(),\n    conditionalPanel(\n      condition = \"output.holdingsRefSelected\",\n      fluidRow(\n        column(12, h4(\"Current Holdings\")),\n        column(12, \n               actionButton(\"addHolding\", \"Add New Holding\", class = \"btn-success\")),\n        column(12, DTOutput(\"currentHoldingsTable\"))\n      ),\n      conditionalPanel(\n        condition = \"input.addHolding > 0 || output.holdingsEditMode\",\n        hr(),\n        fluidRow(\n          column(12, h4(textOutput(\"holdingsFormTitle\"))),\n          column(4,\n                 selectInput(\"holdingsRepo\", \"Repository:*\", choices = NULL),\n                 textInput(\"holdingsFormat\", \"Format:\", \"\"),\n                 textInput(\"holdingsCallNumber\", \"Call Number:\", \"\")),\n          column(4,\n                 textInput(\"holdingsLocation\", \"Location Note:\", \"\"),\n                 textInput(\"holdingsAccess\", \"Access Restriction:\", \"\"),\n                 dateInput(\"holdingsVerification\", \"Verification Date:\", value = Sys.Date())),\n          column(4,\n                 textAreaInput(\"holdingsNotes\", \"Notes:\", \"\", height = \"100px\"),\n                 br(),\n                 actionButton(\"saveHolding\", \"Save Holding\", class = \"btn-success\"),\n                 actionButton(\"cancelHolding\", \"Cancel\", class = \"btn-secondary\"))\n        )\n      )\n    )\n  ),\n  \n  server = function(input, output, session) {\n    # Reactive values\n    values <- reactiveValues(\n      ref_results = NULL,\n      selected_ref_id = NULL,\n      current_holdings = NULL,\n      holdings_edit_mode = FALSE,\n      holdings_edit_id = NULL\n    )\n    \n    # Get repositories for dropdown\n    repositories <- reactive({\n      repo_list <- safe_query(con, 'SELECT \"RepositoryID\", \"RepositoryName\" FROM \"Repositories\" ORDER BY \"RepositoryName\"')\n      repos <- setNames(repo_list$RepositoryID, repo_list$RepositoryName)\n      return(repos)\n    })\n    \n    # Update repository dropdown\n    observe({\n      updateSelectInput(session, \"holdingsRepo\", choices = repositories())\n    })\n    \n    # Search for references\n    observeEvent(input$holdingsSearch, {\n      # Get search parameters\n      search_params <- list(\n        title = input$holdingsTitle,\n        identifier = input$holdingsIdentifier,\n        author = \"\",\n        subject = \"\"\n      )\n      \n      # Perform search\n      values$ref_results <- search_references(con, search_params)\n      \n      # Reset selection\n      values$selected_ref_id <- NULL\n      values$current_holdings <- NULL\n    })\n    \n    # Clear search form\n    observeEvent(input$holdingsClear, {\n      updateTextInput(session, \"holdingsTitle\", value = \"\")\n      updateTextInput(session, \"holdingsIdentifier\", value = \"\")\n      values$ref_results <- NULL\n      values$selected_ref_id <- NULL\n      values$current_holdings <- NULL\n    })\n    \n    # Render reference results\n    output$holdingsRefsTable <- renderDT({\n      if (is.null(values$ref_results) || nrow(values$ref_results) == 0) {\n        return(NULL)\n      }\n      \n      # Format the data\n      display_data <- values$ref_results %>%\n        mutate(\n          Year = substr(CoverDate, 1, 4),\n          Identifiers = paste0(\n            ifelse(!is.na(ISBN) & ISBN != \"\", paste0(\"ISBN: \", ISBN), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", ifelse(ISBN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(ISSN) & ISSN != \"\", paste0(\"ISSN: \", ISSN), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", ifelse(ISBN != \"\" | ISSN != \"\", \"; \", \"\"), \"\"),\n            ifelse(!is.na(DOI) & DOI != \"\", paste0(\"DOI: \", DOI), \"\")\n          )\n        ) %>%\n        select(ReferenceID, Title, DocumentType, Year, Identifiers)\n      \n      datatable(\n        display_data,\n        selection = \"single\",\n        options = list(\n          pageLength = 5,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide ReferenceID column\n          )\n        ),\n        colnames = c(\"ID\", \"Title\", \"Type\", \"Year\", \"Identifiers\")\n      )\n    })\n    \n    # Handle reference selection\n    observeEvent(input$holdingsRefsTable_rows_selected, {\n      selected_row <- input$holdingsRefsTable_rows_selected\n      if (length(selected_row) > 0) {\n        values$selected_ref_id <- values$ref_results$ReferenceID[selected_row]\n        refreshHoldings()\n      } else {\n        values$selected_ref_id <- NULL\n        values$current_holdings <- NULL\n      }\n    })\n    \n    # Refresh holdings\n    refreshHoldings <- function() {\n      if (!is.null(values$selected_ref_id)) {\n        values$current_holdings <- get_reference_holdings(con, values$selected_ref_id)\n      }\n    }\n    \n    # Reference selected flag\n    output$holdingsRefSelected <- reactive({\n      return(!is.null(values$selected_ref_id))\n    })\n    outputOptions(output, \"holdingsRefSelected\", suspendWhenHidden = FALSE)\n    \n    # Holdings edit mode flag\n    output$holdingsEditMode <- reactive({\n      return(values$holdings_edit_mode)\n    })\n    outputOptions(output, \"holdingsEditMode\", suspendWhenHidden = FALSE)\n    \n    # Current holdings table\n    output$currentHoldingsTable <- renderDT({\n      if (is.null(values$current_holdings) || nrow(values$current_holdings) == 0) {\n        return(datatable(\n          data.frame(Message = \"No holdings found for this reference\"),\n          options = list(dom = 't'),\n          rownames = FALSE\n        ))\n      }\n      \n      datatable(\n        values$current_holdings,\n        selection = \"single\",\n        options = list(\n          pageLength = 5,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(targets = 0, visible = FALSE)  # Hide HoldingID column\n          )\n        ),\n        colnames = c(\"ID\", \"Repository\", \"Format\", \"Call Number\", \"Location\", \n                     \"Access Restriction\", \"Verified\", \"Notes\")\n      )\n    })\n    \n    # Add holding button\n    observeEvent(input$addHolding, {\n      values$holdings_edit_mode <- FALSE\n      values$holdings_edit_id <- NULL\n      \n      # Clear form fields\n      updateSelectInput(session, \"holdingsRepo\", selected = NULL)\n      updateTextInput(session, \"holdingsFormat\", value = \"\")\n      updateTextInput(session, \"holdingsCallNumber\", value = \"\")\n      updateTextInput(session, \"holdingsLocation\", value = \"\")\n      updateTextInput(session, \"holdingsAccess\", value = \"\")\n      updateDateInput(session, \"holdingsVerification\", value = Sys.Date())\n      updateTextAreaInput(session, \"holdingsNotes\", value = \"\")\n    })\n    \n    # Holdings form title\n    output$holdingsFormTitle <- renderText({\n      if (values$holdings_edit_mode) {\n        \"Edit Holding\"\n      } else {\n        \"Add New Holding\"\n      }\n    })\n    \n    # Save holding\n    observeEvent(input$saveHolding, {\n      # Validate required fields\n      if (is.null(input$holdingsRepo) || input$holdingsRepo == \"\") {\n        showNotification(\"Repository selection is required\", type = \"error\")\n        return()\n      }\n      \n      # Prepare holding data\n      holding_data <- list(\n        reference_id = values$selected_ref_id,\n        repository_id = as.integer(input$holdingsRepo),\n        format = input$holdingsFormat,\n        call_number = input$holdingsCallNumber,\n        location_note = input$holdingsLocation,\n        access_restriction = input$holdingsAccess,\n        verification_date = input$holdingsVerification,\n        notes = input$holdingsNotes\n      )\n      \n      if (values$holdings_edit_mode) {\n        # Update existing holding\n        tryCatch({\n          query <- '\n            UPDATE \"Holdings\"\n            SET \"RepositoryID\" = $1, \"Format\" = $2, \"CallNumber\" = $3,\n                \"LocationNote\" = $4, \"AccessRestriction\" = $5, \n                \"VerificationDate\" = $6, \"Notes\" = $7\n            WHERE \"HoldingID\" = $8\n          '\n          \n          dbExecute(con, query, params = c(\n            list(\n              holding_data$repository_id,\n              holding_data$format,\n              holding_data$call_number,\n              holding_data$location_note,\n              holding_data$access_restriction,\n              holding_data$verification_date,\n              holding_data$notes,\n              values$holdings_edit_id\n            )\n          ))\n          \n          showNotification(\"Holding updated successfully\", type = \"message\")\n          values$holdings_edit_mode <- FALSE\n          values$holdings_edit_id <- NULL\n          refreshHoldings()\n        }, error = function(e) {\n          showNotification(paste(\"Error updating holding:\", e$message), type = \"error\")\n        })\n      } else {\n        # Add new holding\n        result <- add_holding(con, holding_data)\n        if (!is.null(result)) {\n          showNotification(\"Holding added successfully\", type = \"message\")\n          refreshHoldings()\n        } else {\n          showNotification(\"Failed to add holding\", type = \"error\")\n        }\n      }\n    })\n    \n    # Cancel holding\n    observeEvent(input$cancelHolding, {\n      values$holdings_edit_mode <- FALSE\n      values$holdings_edit_id <- NULL\n    })\n    \n    # Handle holding selection for edit\n    observeEvent(input$currentHoldingsTable_rows_selected, {\n      selected_row <- input$currentHoldingsTable_rows_selected\n      if (length(selected_row) > 0 && !is.null(values$current_holdings)) {\n        # Get selected holding details\n        values$holdings_edit_mode <- TRUE\n        values$holdings_edit_id <- values$current_holdings$HoldingID[selected_row]\n        \n        # Query for full holding details\n        holding_details <- safe_query(con, '\n          SELECT * FROM \"Holdings\"\n          WHERE \"HoldingID\" = $1\n        ', params = list(values$holdings_edit_id))\n        \n        if (nrow(holding_details) > 0) {\n          # Populate form fields\n          updateSelectInput(session, \"holdingsRepo\", selected = as.character(holding_details$RepositoryID))\n          updateTextInput(session, \"holdingsFormat\", value = ifelse(is.na(holding_details$Format), \"\", holding_details$Format))\n          updateTextInput(session, \"holdingsCallNumber\", value = ifelse(is.na(holding_details$CallNumber), \"\", holding_details$CallNumber))\n          updateTextInput(session, \"holdingsLocation\", value = ifelse(is.na(holding_details$LocationNote), \"\", holding_details$LocationNote))\n          updateTextInput(session, \"holdingsAccess\", value = ifelse(is.na(holding_details$AccessRestriction), \"\", holding_details$AccessRestriction))\n          \n          if (!is.na(holding_details$VerificationDate)) {\n            updateDateInput(session, \"holdingsVerification\", value = as.Date(holding_details$VerificationDate))\n          }\n          \n          updateTextAreaInput(session, \"holdingsNotes\", value = ifelse(is.na(holding_details$Notes), \"\", holding_details$Notes))\n        }\n      }\n    })\n  },\n  \n  options = list(height = 800)\n)\n\n```\n\n## Data Import/Export\n\nThis section provides tools for importing your EBSCO data and managing your repository database.\n\n## Import EBSCO Data\n\n```{r}\n\nactionButton(\"importBtn\", \"Show Import Instructions\", class = \"btn-info\")\n```\n\n::: {#importInstructions style=\"display: none; background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 10px;\"}\n### Step-by-Step Import Instructions\n\n**Export data from EBSCO**:\n\nIn EBSCO, perform your search and select the references you want to track Click on the \"Export\" button and choose CSV format Save the file to your computer\n\n### Run the import script:\n\n**Open RStudio** Run the following R code, replacing the file path with your CSV file location:\n\n```{r}\n# Load the database functions\nsource(here(\"scripts/r-script-database-setup.R\"))\n\n# Connect to database\ncon <- connect_to_db()\n\n# Import EBSCO data\nimport_ebsco_csv(con, \"path/to/your/ebsco-export.csv\")\n\n# Disconnect when done\ndbDisconnect(con)\n```\n\n**Verify import**:\n\nUse the Search tab to confirm your data was imported Add repositories and holdings as needed\n:::\n\n```{js}\n$(document).ready(function() {\n  $(\"#importBtn\").click(function() {\n    $(\"#importInstructions\").toggle();\n    \n    if ($(\"#importBtn\").text() === \"Show Import Instructions\") {\n      $(\"#importBtn\").text(\"Hide Import Instructions\");\n    } else {\n      $(\"#importBtn\").text(\"Show Import Instructions\");\n    }\n  });\n});\n```\n\n## Database Backup/Restore\n\nRegular backups of your repository database are recommended. You can use PostgreSQL's built-in tools: Save this entire code (including the previous part I sent) into a file named `ebsco-dashboard.qmd` in your project folder. Then, you can render it in RStudio by:\n\n1.  Opening the file in RStudio\n2.  Clicking the \"Render\" button in the editor toolbar\n3.  Alternatively, running this command in the console: `quarto::quarto_preview(\"ebsco-dashboard.qmd\")`\n\nMake sure to: 1. Update the password in the `db_config` object to match your PostgreSQL password 2. Check that the path to your database functions script is correct (it's referencing `here(\"scripts/r-script-database-setup.R\")`)\n\nThe dashboard should now connect to your database, display statistics about your references, and provide interfaces for searching references, managing repositories, and tracking holdings.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"ebsco-dashboard.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","editor":"visual","title":"EBSCO Repository Tracking Dashboard","theme":"cosmo","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}